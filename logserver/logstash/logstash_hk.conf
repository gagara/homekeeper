input {
    http {
        host => "0.0.0.0"
        port => 8085
        response_headers => {"Content-Length" => "0"}
    }
}

filter {
    json {
        source => "message"
    }
    if ([m] == "csr") {
        if ([n]) {
            mutate { add_field => { "csr_type" => "node" "csr_state" => "actual" "id" => "%{[n][id]}" "n_id" => "%{[n][id]}" "n_ns" => "%{[n][ns]}" "ts" => "%{[n][ts]}" } }
            mutate { convert => { "n_id" => "integer" "n_ns" => "integer" "ts" => "integer" } }
            if ([n][ts]) {
                elasticsearch {
                    hosts => ["elasticsearch:9200"]
                    index => "logstash_hk-*"
                    query => "m:csr AND n.id:%{[n][id]}"
                    fields => { "ts" => "prev_ts_" "n_ns" => "prev_n_ns_" }
                }
                mutate { convert => { "prev_ts_" => "integer" "prev_n_ns_" => "integer" } }
                if ([n][ts] == [prev_ts_]) {
                    mutate { replace => { "csr_state" => "outdated" } }
                }
                if ([n][ns] != [prev_n_ns_]) {
                    elasticsearch {
                        hosts => ["elasticsearch:9200"]
                        index => "logstash_hk-*"
                        query => "m:csr AND n.id:%{[n][id]} AND n.ns:%{[n][ns]}"
                        fields => { "@timestamp" => "prev_timestamp" "ts" => "prev_ts_" }
                    }
                    date {
                        match => ["[prev_timestamp]", "ISO8601"]
                        target => "[prev_timestamp]"
                    }
                    mutate { convert => { "prev_ts_" => "integer" } }
                    if ([prev_ts_] and [ts] > [prev_ts_]) {
                        ruby {
                            code => "event.set('period', (event.get('ts') - event.get('prev_ts_'))) rescue nil"
                        }
                    } else {
                        ruby {
                            code => "event.set('period', (event.get('@timestamp') - event.get('prev_timestamp')) * 1000) rescue nil"
                        }
                    }
                }
            }
        }
        if ([s]) {
            mutate { add_field => { "csr_type" => "sensor" "csr_state" => "actual" "id" => "%{[s][id]}" "s_v" => "%{[s][v]}" "ts" => "%{[s][ts]}"} }
            mutate { convert => { "s_v" => "integer" "ts" => "integer" } }
            if ([s][id] == 60) {
                mutate { add_field => { "sensor_type" => "state" } }
            } else {
                mutate { add_field => { "sensor_type" => "value" } }
            }
            if ([s][ts]) {
                elasticsearch {
                    hosts => ["elasticsearch:9200"]
                    index => "logstash_hk-*"
                    query => "m:csr AND s.id:%{[s][id]}"
                    fields => { "ts" => "prev_ts_" "s_v" => "prev_s_v_" }
                }
                mutate { convert => { "prev_ts_" => "integer" "prev_s_v_" => "integer" } }
                if ([s][ts] == [prev_ts_]) {
                    mutate { replace => { "csr_state" => "outdated" } }
                }
                if ([sensor_type] == "state") {
                    if ([s][v] == 0) {
                        mutate { add_field => { "state" => "false" "state_str" => "OFF" } }
                    }
                    if ([s][v] == 1) {
                        mutate { add_field => { "state" => "true" "state_str" => "ON" } }
                    }
                    if ([s][v] != [prev_s_v_]) {
                        elasticsearch {
                            hosts => ["elasticsearch:9200"]
                            index => "logstash_hk-*"
                            query => "m:csr AND s.id:%{[s][id]} AND s.v:%{[s][v]}"
                            fields => { "@timestamp" => "prev_timestamp" }
                        }
                        date {
                            match => ["[prev_timestamp]", "ISO8601"]
                            target => "[prev_timestamp]"
                        }
                        ruby {
                            code => "event.set('period', (event.get('@timestamp') - event.get('prev_timestamp')) * 1000) rescue nil"
                        }
                    }
                }
            }
        }
    }
    if ([m] == "nsc") {
        mutate { add_field => { "n_id" => "%{[id]}" "n_ns" => "%{[ns]}" } }
        mutate { convert => { "n_id" => "integer" "n_ns" => "integer" } }
    }

    if ([n_ns] == 0) {
        mutate { add_field => { "state" => "false" "state_str" => "OFF" } }
    }
    if ([n_ns] == 1) {
        mutate { add_field => { "state" => "true" "state_str" => "ON" } }
    }

    if ([n_id] == 22) {
        mutate { add_field => { "name" => "Supply" } }
    }
    if ([n_id] == 24) {
        mutate { add_field => { "name" => "Heating" } }
    }
    if ([n_id] == 26) {
        mutate { add_field => { "name" => "Floor" } }
    }
    if ([n_id] == 28) {
        mutate { add_field => { "name" => "Hot water" } }
    }
    if ([n_id] == 30) {
        mutate { add_field => { "name" => "Circulation" } }
    }
    if ([n_id] == 32) {
        mutate { add_field => { "name" => "Boiler" } }
    }
    if ([n_id] == 34) {
        mutate { add_field => { "name" => "Standby heater" } }
    }

    if ([s][id] == 54) {
        mutate { add_field => { "name" => "Supply" } }
    }
    if ([s][id] == 55) {
        mutate { add_field => { "name" => "Reverse" } }
    }
    if ([s][id] == 56) {
        mutate { add_field => { "name" => "Tank" } }
    }
    if ([s][id] == 57) {
        mutate { add_field => { "name" => "Boiler" } }
    }
    if ([s][id] == 58) {
        mutate { add_field => { "name" => "Mix" } }
    }
    if ([s][id] == 59) {
        mutate { add_field => { "name" => "Standby heater" } }
    }
    if ([s][id] == 60) {
        mutate { add_field => { "name" => "Boiler Power" } }
    }
    if ([s][id] == 74) {
        mutate { add_field => { "name" => "Room Temperature" } }
    }
    if ([s][id] == 75) {
        mutate { add_field => { "name" => "Room Humidity" } }
    }

    mutate {
        remove_field => [ "prev_ts_", "prev_s_v_", "prev_n_ns_" ]
    }
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "logstash_hk-%{+YYYY.MM.dd}"
        template => "/usr/share/logstash/config/template_hk.json"
        template_overwrite => "true"
    }
}

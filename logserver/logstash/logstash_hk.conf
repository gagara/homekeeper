input {
    http {
        host => "${HK_PIPELINE_HOST:0.0.0.0}"
        port => "${HK_PIPELINE_PORT:80}"
        # use 'plain' codec to be able to save original message
        # as text in 'message' filed
        additional_codecs => {"application/json" => "plain"}
    }
}

# parse json from plain text 'message' field
filter {
    json {
        source => "message"
    }
}

# Clone and split nsc message to have separate msg for each sensor
filter {
    if ([m] == "nsc" and [s]) {
        clone {
            clones => [ "clone" ]
            remove_field => [ "m", "id", "ns", "ts", "ff", "ft" ]
        }
        if ([type] == "clone") {
            split {
                field => "s"
                add_field => { "m" => "csr" }
            }
        }
    }
}

# Define csr_type; csr_state='actual'. extract ids and values. extract ts
filter {
    if ([m] == "csr") {
        if ([n]) {
            mutate { add_field => { "csr_type" => "node" "csr_state" => "actual" "id" => "%{[n][id]}" "n_id" => "%{[n][id]}" "n_ns" => "%{[n][ns]}" "ts" => "%{[n][ts]}" } }
            mutate { convert => { "n_id" => "integer" "n_ns" => "integer" "ts" => "integer" } }
        }
        if ([s]) {
            mutate { add_field => { "csr_type" => "sensor" "csr_state" => "actual" "id" => "%{[s][id]}" "s_id" => "%{[s][id]}" "s_v" => "%{[s][v]}" "ts" => "%{[s][ts]}"} }
            mutate { convert => { "s_id" => "integer" "ts" => "integer" } }
            if ([s_id] == 82 or [s_id] == 83 or [s_id] == 84 or [s_id] == 85) {
                mutate { convert => { "s_v" => "float" } }
            } else {
                mutate { convert => { "s_v" => "integer" } }
            }
        }
    }
}

# Extract node id and state for nsc message
filter {
    if ([m] == "nsc") {
        mutate { add_field => { "n_id" => "%{[id]}" "n_ns" => "%{[ns]}" } }
        mutate { convert => { "n_id" => "integer" "n_ns" => "integer" } }
    }
}

# Node: extract prev ts, prev state
filter {
    if ([m] == "csr" and [n] and [ts]) {
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
            index => "logstash_hk-*"
            query => "m:csr AND n.id:%{[n_id]}"
            fields => { "ts" => "prev_ts_" "n_ns" => "prev_n_ns_" }
        }
        mutate { convert => { "prev_ts_" => "integer" "prev_n_ns_" => "integer" } }
    }
}

# Node: calculate period
filter {
    if ([m] == "csr" and [n] and [ts] and [n_ns] != [prev_n_ns_]) {
        if ([prev_ts_] and [ts] > [prev_ts_]) {
            ruby {
                code => "event.set('period', (event.get('ts') - event.get('prev_ts_'))) rescue nil"
            }
        } else {
            elasticsearch {
                hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
                index => "logstash_hk-*"
                query => "m:csr AND n.id:%{[n_id]} AND n.ns:\"%{[n_ns]}\""
                fields => { "@timestamp" => "prev_timestamp" }
            }
            date {
                match => ["[prev_timestamp]", "ISO8601"]
                target => "[prev_timestamp]"
            }
            ruby {
                code => "event.set('period', event.get('@timestamp') - event.get('prev_timestamp')) rescue nil"
            }
        }
    }
}

# Node: calculate remaining time in manual mode
filter {
    if ([m] == "csr" and [n] and [ts] and [n][ff] == 1) {
		if ([n][ft] > 0) {
			elasticsearch {
				hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
				index => "logstash_hk-*"
				query => "m:nsc AND id:%{[n_id]}"
                fields => { "@timestamp" => "prev_timestamp" }
			}
            date {
                match => ["[prev_timestamp]", "ISO8601"]
                target => "[prev_timestamp]"
            }
            ruby {
                code => "event.set('remaining_period', ((event.get('[n][ft]') - event.get('ts')) - (event.get('@timestamp') - event.get('prev_timestamp'))) / 60) rescue nil"
            }
			mutate { convert => { "remaining_period" => "integer" } }
		}
    }
}

# Define sensor_type
filter {
    if ([m] == "csr" and [s]) {
        if ([s_id] == 60 or [s_id] == 86) {
            mutate { add_field => { "sensor_type" => "state" } }
        } else {
            mutate { add_field => { "sensor_type" => "value" } }
        }
    }
 }

# Sensor: extract prev ts, prev value
filter {
    if ([m] == "csr" and [s] and [ts]) {
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
            index => "logstash_hk-*"
            query => "m:csr AND s.id:%{[s_id]}"
            fields => { "ts" => "prev_ts_" "s_v" => "prev_s_v_" }
        }
        mutate { convert => { "prev_ts_" => "integer" "prev_s_v_" => "integer" } }
    }
}

# fix: prevent retrieval of "old" sensor values
filter {
    if ([m] == "csr" and [s]) {
        aggregate {
            task_id => "%{s_id}"
            code => "event.set('prev_s_v_', map['prev_s_v']) if map['prev_s_v']; map['prev_s_v'] = event.get('s_v');"
        }
    }
}

# Grid: check online/offline
filter {
    if ([m] == "csr" and [s_id] == 82 and [s_v]) {
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
            index => "logstash_solar-*"
            query => "m:csr AND s.id:%{[s_id]}"
            fields => { "s_v" => "prev_s_v_" }
        }
        if ([s_v] > 180 and [prev_s_v_] <= 180) {
            mutate { add_tag => "grid_state_alert" }
            mutate { add_field => { "state_str" => "ON" } }
        }
        if ([s_v] <= 180 and [prev_s_v_] > 180) {
            mutate { add_tag => "grid_state_alert" }
            mutate { add_field => { "state_str" => "OFF" } }
        }
    }
}

# PV switch: check for error state
filter {
    if ([m] == "csr" and [n_id] == 46 and [n_ns] and [prev_n_ns_] and [n_ns] != [prev_n_ns_] and ([n_ns] < 0 or [prev_n_ns_] < 0)) {
        mutate { add_tag => "pv_load_switch_alert" }
    }
}


# Sensor: calculate period for state sensor
filter {
    if ([m] == "csr" and [s] and [ts] and [sensor_type] == "state") {
        if ([s_v] != [prev_s_v_]) {
            if ([prev_ts_] and [ts] > [prev_ts_]) {
                ruby {
                    code => "event.set('period', (event.get('ts') - event.get('prev_ts_'))) rescue nil"
                }
            } else {
                elasticsearch {
                    hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
                    index => "logstash_hk-*"
                    query => "m:csr AND s.id:%{[s_id]} AND s.v:%{[s_v]}"
                    fields => { "@timestamp" => "prev_timestamp" }
                }
                date {
                    match => ["[prev_timestamp]", "ISO8601"]
                    target => "[prev_timestamp]"
                }
                ruby {
                    code => "event.set('period', event.get('@timestamp') - event.get('prev_timestamp')) rescue nil"
                }
            }
        }
    }
}

# Calculate production fields
filter {
    if ([m] == "csr" and [s_id] == 57 and [s_v] and [prev_s_v_] and [s_v] > [prev_s_v_]) {
        # temp in Boiler increased. check sources:
        # 1. solar secondary
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
            index => "logstash_hk-*"
            query => "n_id:38"
            fields => { "n_ns" => "solar_n_ns_" }
        }
        # 2. hot water
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
            index => "logstash_hk-*"
            query => "n_id:28"
            fields => { "n_ns" => "hotwater_n_ns_" }
        }
        # 3. boiler power
        elasticsearch {
            hosts => ["${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"]
            index => "logstash_hk-*"
            query => "s_id:60"
            fields => { "s_v" => "boilerpower_s_v_" }
        }
        mutate { convert => { "solar_n_ns_" => "integer" "hotwater_n_ns_" => "integer" "boilerpower_s_v_" => "integer" } }
        if ([solar_n_ns_] == 1 and [boilerpower_s_v_] == 0) {
            mutate { add_field => { "production_type" => "solar" } }
            ruby {
                code => "event.set('production', event.get('s_v') - event.get('prev_s_v_')) rescue nil"
            }
        }
        if ([solar_n_ns_] == 1 and [boilerpower_s_v_] == 1) {
            mutate { add_field => { "production_type" => "grid" } }
            ruby {
                code => "event.set('production', event.get('s_v') - event.get('prev_s_v_')) rescue nil"
            }
        }
        if ([solar_n_ns_] == 0 and [boilerpower_s_v_] == 1 and [hotwater_n_ns_] == 0) {
            mutate { add_field => { "production_type" => "grid" } }
            ruby {
                code => "event.set('production', event.get('s_v') - event.get('prev_s_v_')) rescue nil"
            }
        }
    }
}

# Update csr_state
filter {
    if ([m] == "csr" and [ts] and [ts] > 0 and [prev_ts_] and [prev_ts_] > 0 and [ts] == [prev_ts_]) {
        mutate { replace => { "csr_state" => "outdated" } }
    }
}

# Add human-readable fields for sensor states
filter {
    if ([sensor_type] == "state") {
        if ([s_v] == 0) {
            mutate { add_field => { "state" => "false" "state_str" => "OFF" } }
        }
        if ([s_v] == 1) {
            mutate { add_field => { "state" => "true" "state_str" => "ON" } }
        }
    }
}

# Add human-readable fields for node mode
filter {
    if ([n][ff] == 0) {
        mutate { add_field => { "mode" => "auto" } }
    }
    if ([n][ff] == 1) {
        mutate { add_field => { "mode" => "manual" } }
    }
}

# Add human-readable fields for node state
filter {
    if ([n_ns]) {
        if ([n_ns] == 0) {
            mutate { add_field => { "state" => "false" "state_str" => "OFF" } }
        }
        if ([n_ns] == 1) {
            mutate { add_field => { "state" => "true" "state_str" => "ON" } }
        }
        if ([n_ns] < 0) {
            mutate { add_field => { "state_str" => "ERROR" } }
        }
    }
}

# Add human-readable names to nodes and sensors
filter {
    if ([n_id] == 22) {
        mutate { add_field => { "name" => "Supply" } }
    }
    if ([n_id] == 24) {
        mutate { add_field => { "name" => "Heating" } }
    }
    if ([n_id] == 26) {
        mutate { add_field => { "name" => "Floor" } }
    }
    if ([n_id] == 28) {
        mutate { add_field => { "name" => "Hot water" } }
    }
    if ([n_id] == 30) {
        mutate { add_field => { "name" => "Circulation" } }
    }
    if ([n_id] == 34) {
        mutate { add_field => { "name" => "Standby heater" } }
    }
    if ([n_id] == 36) {
        mutate { add_field => { "name" => "Solar Primay" } }
    }
    if ([n_id] == 38) {
        mutate { add_field => { "name" => "Solar Secondary" } }
    }
    if ([n_id] == 40) {
        mutate { add_field => { "name" => "Heating Valve" } }
    }
    if ([n_id] == 44) {
        mutate { add_field => { "name" => "Ventilation Valve" } }
    }
    if ([n_id] == 46) {
        mutate { add_field => { "name" => "PV Load Switch" } }
    }

    if ([s_id] == 54) {
        mutate { add_field => { "name" => "Supply" } }
    }
    if ([s_id] == 55) {
        mutate { add_field => { "name" => "Reverse" } }
    }
    if ([s_id] == 56) {
        mutate { add_field => { "name" => "Tank" } }
    }
    if ([s_id] == 57) {
        mutate { add_field => { "name" => "Boiler" } }
    }
    if ([s_id] == 58) {
        mutate { add_field => { "name" => "Mix" } }
    }
    if ([s_id] == 59) {
        mutate { add_field => { "name" => "Standby heater" } }
    }
    if ([s_id] == 60) {
        mutate { add_field => { "name" => "Boiler Power" } }
    }
    if ([s_id] == 61) {
        mutate { add_field => { "name" => "Solar Primary" } }
    }
    if ([s_id] == 62) {
        mutate { add_field => { "name" => "Solar Secondary" } }
    }
    if ([s_id] == 74) {
        mutate { add_field => { "name" => "Room Temperature" } }
    }
    if ([s_id] == 75) {
        mutate { add_field => { "name" => "Room Humidity" } }
    }
    if ([s_id] == 78) {
        mutate { add_field => { "name" => "Basement Temperature" } }
    }
    if ([s_id] == 79) {
        mutate { add_field => { "name" => "Basement Humidity" } }
    }
    if ([s_id] == 80) {
        mutate { add_field => { "name" => "Outdoor Temperature" } }
    }
    if ([s_id] == 81) {
        mutate { add_field => { "name" => "Outdoor Humidity" } }
    }
    if ([s_id] == 82) {
        mutate { add_field => { "name" => "AC Voltage" } }
    }
    if ([s_id] == 83) {
        mutate { add_field => { "name" => "AC Current" } }
    }
    if ([s_id] == 84) {
        mutate { add_field => { "name" => "AC Power" } }
    }
    if ([s_id] == 85) {
        mutate { add_field => { "name" => "AC Energy" } }
    }
    if ([s_id] == 86) {
        mutate { add_field => { "name" => "Water Pump Power" } }
    }
    if ([s][id] == 201) {
        mutate { add_field => { "name" => "Room1 Min" } }
    }
    if ([s][id] == 202) {
        mutate { add_field => { "name" => "Room1 Max" } }
    }
}

# Remove temporary fields
filter {
    mutate {
        remove_field => [ "prev_ts_", "prev_s_v_", "prev_n_ns_", "type", "solar_n_ns_", "hotwater_n_ns_", "boilerpower_s_v_" ]
    }
}

output {
    if ([s_id] == 82 or [s_id] == 83 or [s_id] == 84 or [s_id] == 85) {
        # for energy balance sensors use 'solar' index
        elasticsearch {
            hosts => "${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"
            index => "logstash_solar-%{+YYYY.MM.dd}"
            template => "/usr/share/logstash/config/template_solar.json"
            template_name => "solar"
            template_overwrite => "true"
        }
    } else {
        elasticsearch {
            hosts => "${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"
            index => "logstash_hk-%{+YYYY.MM.dd}"
            template => "/usr/share/logstash/config/template_hk.json"
            template_name => "homekeeper"
            template_overwrite => "true"
        }
    }
    # send alerts
    if "grid_state_alert" in [tags] {
        email {
            to => "${EMAIL_RECIPIENTS_LIST}"
            subject => "Grid is %{state_str}"
            body => "Grid state: %{state_str}\nGrid voltage: %{s_v}\nTimestamp: %{@timestamp}"
            from => "${EMAIL_SENDER:logstash@localhost.net}"
            address => "${SMTP_SERVER:localhost}"
            port => "${SMTP_PORT:25}"
            username => "${SMTP_USER:user}"
            password => "${SMTP_PASSWORD:secret}"
        }
    }
    if "pv_load_switch_alert" in [tags] {
        email {
            to => "${EMAIL_RECIPIENTS_LIST}"
            subject => "PV Load switch is %{state_str}"
            body => "PV Load switch state: %{state_str}\nTimestamp: %{@timestamp}"
            from => "${EMAIL_SENDER:logstash@localhost.net}"
            address => "${SMTP_SERVER:localhost}"
            port => "${SMTP_PORT:25}"
            username => "${SMTP_USER:user}"
            password => "${SMTP_PASSWORD:secret}"
        }
    }
}

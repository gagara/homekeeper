input {
    exec {
        id => "current data"
        command => 'curl -s -X GET "http://${FRONIUS_HOST:localhost}:${FRONIUS_PORT:80}/solar_api/v1/GetInverterRealtimeData.cgi?Scope=Device&DeviceId=1&DataCollection=CommonInverterData"'
        interval => 60
        codec => "json"
    }
    exec {
        id => "archive data"
        command => 'curl -s -X GET "http://${FRONIUS_HOST:localhost}:${FRONIUS_PORT:80}/solar_api/v1/GetArchiveData.cgi?Scope=Device&DeviceClass=Inverter&DeviceId=1&StartDate=$(date -u --date=@$(($(date -u +%s) - 3000)) +%Y-%m-%dT%H:%M:%S)&EndDate=$(date -u +%Y-%m-%dT%H:%M:%S)&Channel=Current_DC_String_1&Channel=Current_DC_String_2"'
        interval => 300
        codec => "json"
    }
}

# achive: Split data by channel type
filter {
    if ([Head][RequestArguments][Channel]) {
        split {
            field => "[Head][RequestArguments][Channel]"
        }
    }
}

# archive: extract current channel data
filter {
    if ([Head][RequestArguments][Channel]) {
        mutate {
            add_field => { "unit" => "%{[Body][Data][inverter/1][Data][%{[Head][RequestArguments][Channel]}][Unit]}" }
            add_field => { "values_" => "%{[Body][Data][inverter/1][Data][%{[Head][RequestArguments][Channel]}][Values]}" }
        }
    }
}

# archive: remove nested channel data
filter {
    if ([Head][RequestArguments][Channel]) {
        mutate {
            remove_field => ["[Body][Data][inverter/1][Data]"]
        }
    }
}
#filter {
#    if ([Head][RequestArguments][Channel]) {
#        mutate {
#            add_field => { "flat_values" => "%{[Body][Data][inverter/1][Data][Current_DC_String_1][Values]}" }
#        }
#    }
#}

output {
    elasticsearch {
        hosts => "${ELASTICSEARCH_HOST:localhost}:${ELASTICSEARCH_PORT:9200}"
        index => "logstash_solar-%{+YYYY.MM.dd}"
        template => "/usr/share/logstash/config/template_solar.json"
        template_name => "solar"
        template_overwrite => "true"
    }
}
